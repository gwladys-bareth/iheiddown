on:
  pull_request:
    branches:
      - main

name: Binary checks

jobs:

  build:
    name: Build for ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, r: 'release', artifact_name: '*.tar.gz', asset_name: macOS}
          - {os: windows-latest, r: 'release', artifact_name: '*.zip', asset_name: winOS}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest", artifact_name: '*.tar.gz', asset_name: linuxOS}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: |
            any::rcmdcheck
            any::lintr
            any::roxygen2
            any::remotes
          needs: check

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'cat(remotes::system_requirements("ubuntu", "20.04"), sep = "\n")')

      - name: Install X11 dependencies on MacOS for pdftools
        if: runner.os == 'macOS'
        run: |
          brew install --cask xquartz

       - name: Install GitHub dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_github("crsh/citr")
          remotes::install_github("gadenbuie/xaringanExtra")
          remotes::install_github("giocomai/ganttrify")
        shell: Rscript {0}

      - name: Document
        run: Rscript -e 'roxygen2::roxygenise()'

      - uses: r-lib/actions/check-r-package@v2
        env:
          _R_CHECK_FORCE_SUGGESTS_: false
        with:
          upload-snapshots: true

      - name: Binary
        run: |
          pkgbuild::clean_dll()
          binary <- pkgbuild::build(binary = TRUE, needs_compilation = TRUE, compile_attributes = TRUE)
          dir.create("build")
          file.copy(binary, "build")
        shell: Rscript {0}

      - name: Save binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.asset_name }}
          path: build/

      - name: Calculate code coverage
        run: Rscript -e "covr::codecov()"
